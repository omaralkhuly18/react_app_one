{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OMAR\\\\one-app\\\\src\\\\component\\\\counter.jsx\";\nimport React, { Component } from 'react';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n    // 1-fun => When you press the button containing that function, it starts increasing the numbers sequentially.\n    // 2-عند الضغط على الزر المحتوى على تلك الداله يبدأ بزيادة الأرقام تسلسليا\n    // 3-handleIncrement = () => لأن الthis الموجوده داخل الfun يجب الإشاره إلى أنها منفصله عن الthis الملحقه لل state\n    // 4-لوضع قيم داخل الداله الموجوده في event الموجود داخل كود الhtml\n    this.handleIncrement = product => {\n      // باستخدام setState لتزيد القيمة بمقدار 1 في كل مرة يتم الضغط على الزر.\n      this.setState({\n        count: this.state.count + 1\n      });\n      console.log('product');\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      id: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.classRender(),\n        children: this.formatCount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        // لوضع قيم داخل الداله الموجوده في event الموجود داخل كود الhtml\n        onClick: () => this.handleIncrement({\n          id: 1\n        }),\n        className: \"btn btn-primary btn-lg\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this);\n  }\n  // fun => If the count is zero, it is the primary color, and if it is greater than zero, it changes color.\n  // إذا كان الكونت يساوي صفر فيكون باللون الأساسي وإذا زاد عن صفر فيغير اللون.\n  classRender() {\n    let classes = \"num1 text-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  // fun => Convert zero number to word\n  // تحويل الصفر رقم إلى كلمه\n  formatCount() {\n    const {\n      count\n    } = this.state;\n    return count === 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"num1\",\n      children: \"Zero\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 27\n    }, this) : count;\n  }\n}\nexport default counter;\n\n// الفرق الأساسي هنا:\n// استخدام useState:\n// بدلاً من استخدام this.state في مكونات الفئات، نستخدم useState لإنشاء متغير count ووظيفة setCount لتحديثه.\n//  useState يأخذ القيمة الابتدائية (في هذه الحالة 0) ويعيد المتغير والوظيفة التي تغيره.\n\n// مكونات الدوال بدلاً من الفئات:\n// في هذه الطريقة، المكون Counter عبارة عن دالة بدلاً من فئة. هذا يجعل الكود أبسط وأكثر وضوحًا.\n\n// إزالة الحاجة إلى this:\n// لم نعد بحاجة إلى استخدام this لأننا نعمل مع متغيرات دوال مباشرة.\n\n// code by ather way\n// import React, { useState } from \"react\";\n// import \"./style.css\";\n\n// function Counter() {\n//   // استخدام useState لإنشاء state للعدّاد\n//   const [count, setCount] = useState(0);\n\n//   // وظيفة لزيادة قيمة العدّاد\n//   const handleIncrement = () => {\n//     setCount(count + 1);\n//   };\n\n//   return (\n//     <React.Fragment>\n//       <span className={classRender()}>{formatCount()}</span>\n//       <button onClick={handleIncrement} className=\"btn btn-primary btn-lg\">\n//         Increment\n//       </button>\n//     </React.Fragment>\n//   );\n\n//   function classRender() {\n//     let classes = \"num1 text-\";\n//     classes += count === 0 ? \"warning\" : \"primary\";\n//     return classes;\n//   }\n\n//   function formatCount() {\n//     return count === 0 ? <h5 className=\"num1\">Zero</h5> : count;\n//   }\n// }\n\n// export default Counter;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","counter","constructor","args","state","count","handleIncrement","product","setState","console","log","render","Fragment","id","children","className","classRender","formatCount","fileName","_jsxFileName","lineNumber","columnNumber","onClick","classes"],"sources":["C:/Users/OMAR/one-app/src/component/counter.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './style.css'\r\n\r\nclass counter extends Component {\r\n    state = {\r\n        count: 0,\r\n     }\r\n    render() {\r\n        return (\r\n            <React.Fragment id=''>\r\n                <span  className={ this.classRender() }>{this.formatCount()}</span>\r\n                <button\r\n                // لوضع قيم داخل الداله الموجوده في event الموجود داخل كود الhtml\r\n                 onClick={() => this.handleIncrement({id:1})}\r\n                className='btn btn-primary btn-lg'>\r\n                   Increment\r\n                </button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    // 1-fun => When you press the button containing that function, it starts increasing the numbers sequentially.\r\n    // 2-عند الضغط على الزر المحتوى على تلك الداله يبدأ بزيادة الأرقام تسلسليا\r\n    // 3-handleIncrement = () => لأن الthis الموجوده داخل الfun يجب الإشاره إلى أنها منفصله عن الthis الملحقه لل state\r\n    // 4-لوضع قيم داخل الداله الموجوده في event الموجود داخل كود الhtml\r\n    handleIncrement = (product) => {\r\n        // باستخدام setState لتزيد القيمة بمقدار 1 في كل مرة يتم الضغط على الزر.\r\n        this.setState({ count: this.state.count + 1 });\r\n        console.log('product')\r\n    };\r\n    // fun => If the count is zero, it is the primary color, and if it is greater than zero, it changes color.\r\n    // إذا كان الكونت يساوي صفر فيكون باللون الأساسي وإذا زاد عن صفر فيغير اللون.\r\n    classRender() {\r\n        let classes = \"num1 text-\";\r\n        classes += this.state.count === 0 ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    // fun => Convert zero number to word\r\n    // تحويل الصفر رقم إلى كلمه\r\n    formatCount(){\r\n        const{count}=this.state\r\n        return count=== 0?<span className='num1'>Zero</span>:count\r\n    }\r\n}\r\nexport default counter;\r\n\r\n// الفرق الأساسي هنا:\r\n// استخدام useState:\r\n// بدلاً من استخدام this.state في مكونات الفئات، نستخدم useState لإنشاء متغير count ووظيفة setCount لتحديثه.\r\n//  useState يأخذ القيمة الابتدائية (في هذه الحالة 0) ويعيد المتغير والوظيفة التي تغيره.\r\n\r\n// مكونات الدوال بدلاً من الفئات:\r\n// في هذه الطريقة، المكون Counter عبارة عن دالة بدلاً من فئة. هذا يجعل الكود أبسط وأكثر وضوحًا.\r\n\r\n// إزالة الحاجة إلى this:\r\n// لم نعد بحاجة إلى استخدام this لأننا نعمل مع متغيرات دوال مباشرة.\r\n\r\n\r\n// code by ather way\r\n// import React, { useState } from \"react\";\r\n// import \"./style.css\";\r\n\r\n// function Counter() {\r\n//   // استخدام useState لإنشاء state للعدّاد\r\n//   const [count, setCount] = useState(0);\r\n\r\n//   // وظيفة لزيادة قيمة العدّاد\r\n//   const handleIncrement = () => {\r\n//     setCount(count + 1);\r\n//   };\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <span className={classRender()}>{formatCount()}</span>\r\n//       <button onClick={handleIncrement} className=\"btn btn-primary btn-lg\">\r\n//         Increment\r\n//       </button>\r\n//     </React.Fragment>\r\n//   );\r\n\r\n//   function classRender() {\r\n//     let classes = \"num1 text-\";\r\n//     classes += count === 0 ? \"warning\" : \"primary\";\r\n//     return classes;\r\n//   }\r\n\r\n//   function formatCount() {\r\n//     return count === 0 ? <h5 className=\"num1\">Zero</h5> : count;\r\n//   }\r\n// }\r\n\r\n// export default Counter;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,OAAO,SAASH,SAAS,CAAC;EAAAI,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC5BC,KAAK,GAAG;MACJC,KAAK,EAAE;IACV,CAAC;IAcF;IACA;IACA;IACA;IAAA,KACAC,eAAe,GAAIC,OAAO,IAAK;MAC3B;MACA,IAAI,CAACC,QAAQ,CAAC;QAAEH,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAK,GAAG;MAAE,CAAC,CAAC;MAC9CI,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAC1B,CAAC;EAAA;EArBDC,MAAMA,CAAA,EAAG;IACL,oBACIX,OAAA,CAACH,KAAK,CAACe,QAAQ;MAACC,EAAE,EAAC,EAAE;MAAAC,QAAA,gBACjBd,OAAA;QAAOe,SAAS,EAAG,IAAI,CAACC,WAAW,CAAC,CAAG;QAAAF,QAAA,EAAE,IAAI,CAACG,WAAW,CAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACnErB,OAAA;QACA;QACCsB,OAAO,EAAEA,CAAA,KAAM,IAAI,CAAChB,eAAe,CAAC;UAACO,EAAE,EAAC;QAAC,CAAC,CAAE;QAC7CE,SAAS,EAAC,wBAAwB;QAAAD,QAAA,EAAC;MAEnC;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAEzB;EAUA;EACA;EACAL,WAAWA,CAAA,EAAG;IACV,IAAIO,OAAO,GAAG,YAAY;IAC1BA,OAAO,IAAI,IAAI,CAACnB,KAAK,CAACC,KAAK,KAAK,CAAC,GAAG,SAAS,GAAG,SAAS;IACzD,OAAOkB,OAAO;EAClB;;EAEA;EACA;EACAN,WAAWA,CAAA,EAAE;IACT,MAAK;MAACZ;IAAK,CAAC,GAAC,IAAI,CAACD,KAAK;IACvB,OAAOC,KAAK,KAAI,CAAC,gBAACL,OAAA;MAAMe,SAAS,EAAC,MAAM;MAAAD,QAAA,EAAC;IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,GAAChB,KAAK;EAC9D;AACJ;AACA,eAAeJ,OAAO;;AAEtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}