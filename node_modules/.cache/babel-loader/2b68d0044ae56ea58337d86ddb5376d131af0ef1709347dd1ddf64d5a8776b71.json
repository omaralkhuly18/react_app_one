{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OMAR\\\\one-app\\\\src\\\\component\\\\counter.jsx\",\n  _s = $RefreshSig$();\n// import React, { Component } from 'react';\n// import './style.css'\n\n// class counter extends Component {\n//     state = {\n//         count: 0,\n//      }\n//     render() {\n//         return (\n//             <React.Fragment>\n//                 <span className={ this.classRender() }>{this.formatCount()}</span>\n//                 <button\n//                  onClick={this.handleIncrement}\n//                 className='btn btn-primary btn-lg'>\n//                    Increment\n//                 </button>\n//             </React.Fragment>\n//         );\n//     }\n//     // fun => When you press the button containing that function, it starts increasing the numbers sequentially.\n//     // عند الضغط على الزر المحتوى على تلك الداله يبدأ بزيادة الأرقام تسلسليا\n//     handleIncrement = () => {\n//         // باستخدام setState لتزيد القيمة بمقدار 1 في كل مرة يتم الضغط على الزر.\n//         this.setState({ count: this.state.count + 1 });\n//     };\n//     // fun => If the count is zero, it is the primary color, and if it is greater than zero, it changes color.\n//     // إذا كان الكونت يساوي صفر فيكون باللون الأساسي وإذا زاد عن صفر فيغير اللون.\n//     classRender() {\n//         let classes = \"num1 text-\";\n//         classes += this.state.count === 0 ? \"warning\" : \"primary\";\n//         return classes;\n//     }\n\n//     // fun => Convert zero number to word\n//     // تحويل الصفر رقم إلى كلمه\n//     formatCount(){\n//         const{count}=this.state\n//         return count=== 0?<span className='num1'>Zero</span>:count\n//     }\n// }\n// export default counter;\n\n// الفرق الأساسي هنا:\n// استخدام useState:\n// بدلاً من استخدام this.state في مكونات الفئات، نستخدم useState لإنشاء متغير count ووظيفة setCount لتحديثه.\n//  useState يأخذ القيمة الابتدائية (في هذه الحالة 0) ويعيد المتغير والوظيفة التي تغيره.\n\n// مكونات الدوال بدلاً من الفئات:\n// في هذه الطريقة، المكون Counter عبارة عن دالة بدلاً من فئة. هذا يجعل الكود أبسط وأكثر وضوحًا.\n\n// إزالة الحاجة إلى this:\n// لم نعد بحاجة إلى استخدام this لأننا نعمل مع متغيرات دوال مباشرة.\n\nimport React, { useState } from \"react\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Counter() {\n  _s();\n  // استخدام useState لإنشاء state للعدّاد\n  const [count, setCount] = useState(0);\n\n  // وظيفة لزيادة قيمة العدّاد\n  const handleIncrement = () => {\n    setCount(count + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: classRender(),\n      children: formatCount()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleIncrement(),\n      className: \"btn btn-primary btn-lg\",\n      children: \"Increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n  function classRender() {\n    let classes = \"num1 text-\";\n    classes += count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n  function formatCount() {\n    return count === 0 ? /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"num1\",\n      children: \"Zero\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 26\n    }, this) : count;\n  }\n}\n_s(Counter, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = Counter;\nexport default Counter;\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Counter","_s","count","setCount","handleIncrement","Fragment","children","className","classRender","formatCount","fileName","_jsxFileName","lineNumber","columnNumber","onClick","classes","_c","$RefreshReg$"],"sources":["C:/Users/OMAR/one-app/src/component/counter.jsx"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import './style.css'\r\n\r\n// class counter extends Component {\r\n//     state = {\r\n//         count: 0,\r\n//      }\r\n//     render() {\r\n//         return (\r\n//             <React.Fragment>\r\n//                 <span className={ this.classRender() }>{this.formatCount()}</span>\r\n//                 <button\r\n//                  onClick={this.handleIncrement}\r\n//                 className='btn btn-primary btn-lg'>\r\n//                    Increment\r\n//                 </button>\r\n//             </React.Fragment>\r\n//         );\r\n//     }\r\n//     // fun => When you press the button containing that function, it starts increasing the numbers sequentially.\r\n//     // عند الضغط على الزر المحتوى على تلك الداله يبدأ بزيادة الأرقام تسلسليا\r\n//     handleIncrement = () => {\r\n//         // باستخدام setState لتزيد القيمة بمقدار 1 في كل مرة يتم الضغط على الزر.\r\n//         this.setState({ count: this.state.count + 1 });\r\n//     };\r\n//     // fun => If the count is zero, it is the primary color, and if it is greater than zero, it changes color.\r\n//     // إذا كان الكونت يساوي صفر فيكون باللون الأساسي وإذا زاد عن صفر فيغير اللون.\r\n//     classRender() {\r\n//         let classes = \"num1 text-\";\r\n//         classes += this.state.count === 0 ? \"warning\" : \"primary\";\r\n//         return classes;\r\n//     }\r\n\r\n//     // fun => Convert zero number to word\r\n//     // تحويل الصفر رقم إلى كلمه\r\n//     formatCount(){\r\n//         const{count}=this.state\r\n//         return count=== 0?<span className='num1'>Zero</span>:count\r\n//     }\r\n// }\r\n// export default counter;\r\n\r\n// الفرق الأساسي هنا:\r\n// استخدام useState:\r\n// بدلاً من استخدام this.state في مكونات الفئات، نستخدم useState لإنشاء متغير count ووظيفة setCount لتحديثه.\r\n//  useState يأخذ القيمة الابتدائية (في هذه الحالة 0) ويعيد المتغير والوظيفة التي تغيره.\r\n\r\n// مكونات الدوال بدلاً من الفئات:\r\n// في هذه الطريقة، المكون Counter عبارة عن دالة بدلاً من فئة. هذا يجعل الكود أبسط وأكثر وضوحًا.\r\n\r\n// إزالة الحاجة إلى this:\r\n// لم نعد بحاجة إلى استخدام this لأننا نعمل مع متغيرات دوال مباشرة.\r\n\r\nimport React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Counter() {\r\n  // استخدام useState لإنشاء state للعدّاد\r\n  const [count, setCount] = useState(0);\r\n\r\n  // وظيفة لزيادة قيمة العدّاد\r\n  const handleIncrement = () => {\r\n    setCount(count + 1);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <span className={classRender()}>{formatCount()}</span>\r\n      <button onClick={handleIncrement()} className=\"btn btn-primary btn-lg\">\r\n        Increment\r\n      </button>\r\n    </React.Fragment>\r\n  );\r\n\r\n  function classRender() {\r\n    let classes = \"num1 text-\";\r\n    classes += count === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  function formatCount() {\r\n    return count === 0 ? <h5 className=\"num1\">Zero</h5> : count;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACA,MAAMO,eAAe,GAAGA,CAAA,KAAM;IAC5BD,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EACrB,CAAC;EAED,oBACEH,OAAA,CAACH,KAAK,CAACS,QAAQ;IAAAC,QAAA,gBACbP,OAAA;MAAMQ,SAAS,EAAEC,WAAW,CAAC,CAAE;MAAAF,QAAA,EAAEG,WAAW,CAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACtDd,OAAA;MAAQe,OAAO,EAAEV,eAAe,CAAC,CAAE;MAACG,SAAS,EAAC,wBAAwB;MAAAD,QAAA,EAAC;IAEvE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;EAGnB,SAASL,WAAWA,CAAA,EAAG;IACrB,IAAIO,OAAO,GAAG,YAAY;IAC1BA,OAAO,IAAIb,KAAK,KAAK,CAAC,GAAG,SAAS,GAAG,SAAS;IAC9C,OAAOa,OAAO;EAChB;EAEA,SAASN,WAAWA,CAAA,EAAG;IACrB,OAAOP,KAAK,KAAK,CAAC,gBAAGH,OAAA;MAAIQ,SAAS,EAAC,MAAM;MAAAD,QAAA,EAAC;IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,GAAGX,KAAK;EAC7D;AACF;AAACD,EAAA,CA3BQD,OAAO;AAAAgB,EAAA,GAAPhB,OAAO;AA6BhB,eAAeA,OAAO;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}